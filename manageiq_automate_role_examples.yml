---
- name: manageiq-automate role example usage
  hosts: localhost
  connection: local
  vars:
  - object: root
  - interval: 600
  - manageiq_validate_certs: false

  gather_facts: False
  roles:
  - manageiq-core.manageiq-automate
  
  tasks:
    
  # Working with input parameters:
  #
  #      'method_parameter_exists'
  #      'get_method_parametersâ€™
  #      'get_method_parameter'
  #      'get_decrypted_method_parameter'
  
    - name: Get the list of method parameters (get_method_parameters)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_method_parameters: yes
      register: get_method_parameters
    - debug: msg="Result:{{ get_method_parameters.value }}"
  
    - name: Check if a method parameter called 'ipam_url' exists (method_parameter_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        method_parameter_exists:
          parameter: "ipam_url"
      register: method_parameter_exists
    - debug: msg="Result:{{ method_parameter_exists.value }}"
    
    - name: Get the value of a method parameter called 'ipam_url' (get_method_parameter)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_method_parameter:
          parameter: "ipam_url"
      register: method_parameter
    - debug: msg="Result:{{ method_parameter.value }}"
    - debug: msg="(The same from a built-in var:{{ ipam_url }})"
    
    - name: Decrypt a method_parameter called 'default_password' (get_decrypted_method_parameter)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_method_parameter:
          attribute: default_password
      register: decrypted_method_parameter
    - debug: msg=Result:{{ decrypted_method_parameter.value }}
    - debug: msg="(The same from a built-in var:{{ default_password }})"
    
    - name: Decrypt a method_parameter called 'dialog_option_0_root_password' (get_decrypted_method_parameter)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_method_parameter:
          attribute: 'dialog_option_0_root_password'
      register: decrypted_method_parameter
    - debug: msg=Result:{{ decrypted_method_parameter.value }}
    - debug: msg="dialog_option_0_root_password={{ dialog_option_0_root_password }}"
    
  # Working with Objects:
  #
  #    'object_exists'
  #    'get_object_names'
  #    'get_object_attribute_names'
  #    'get_vmdb_object'
  
    #- name: check whether the configuration domain exists in the workspace (object_exists)
    #  manageiq_automate:
    #    workspace: "{{ workspace }}"
    #    object_exists: 
    #      object: "/Configuration/OpenShift/Parameters/default"
    #  register: object_exists
    #- debug: msg="Result:{{ object_exists.value }}"
 
    - name: Get the full list of objects/instances in the workspace (get_object_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_names: yes
      register: workspace_object_names
    - debug: msg="Result:{{ workspace_object_names.value }}"
    
    - name: Get the list of root object attribute names (get_object_attribute_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_attribute_names:
          object: "root"
      register: root_object_attribute_names
    - debug: msg="Result:{{ root_object_attribute_names.value }}"
      
    - name: "Get each of the root object's attributes (get_attribute)"
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: root
          attribute: "{{ item }}"
      ignore_errors: yes
      loop: "{{ root_object_attribute_names.value }}"
      register: root_attributes
             
    - name: Get the root object's href'able attributes as objects (get_vmdb_object)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_vmdb_object:
          object: root
          attribute: "{{ item }}"
      no_log: True
      loop: 
        - miq_server
        - user
        - miq_group
        - tenant
      register: objects
    - debug: msg="Result:{{ objects|dict2items }}"
  
  # Working with attributes:
  #
  #      'attribute_exists':
  # 	   'get_attribute'
  #      'get_decrypted_attribute'
  #      'get_object_attribute_names'
  #      'set_attribute'
  #      'set_attributes'
  #      'set_encrypted_attribute'
   
    - name: Get the full list of configuration domain attribute names (get_object_attribute_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_attribute_names:
          object: "/Configuration/OpenShift/Parameters/default"
      register: configuration_domain_attribute_names
    - debug: msg="Result:{{ configuration_domain_attribute_names.value }}"
    
    - name: Check if an object/instance attribute exists (attribute_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        attribute_exists:
          object: "/Configuration/OpenShift/Parameters/default"
          attribute: "rhel_subscription_pool"
      register: attribute_exists
    - debug: msg="Result:{{ attribute_exists.value }}"
    
    - name: Get the "rhel_subscription_pool" attribute from a configuration domain instance (get_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: "/Configuration/OpenShift/Parameters/default"
          attribute: "rhel_subscription_pool"
      register: rhel_subscription_pool
    - debug: msg="Result:{{ rhel_subscription_pool.value }}"
    
    - name: Get the "ldap_user_password" encrypted attribute from a configuration domain instance (get_decrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_attribute:
          object: "/Configuration/OpenShift/Parameters/default"
          attribute: "ldap_user_password"
      register: ldap_user_password
    - debug: msg="Result:{{ ldap_user_password.value }}"
    
    - name: Get the "rhel_subscription_pass" encrypted attribute from a configuration domain instance (get_decrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_attribute:
          object: "/Configuration/OpenShift/Parameters/default"
          attribute: "rhel_subscription_pass"
      register: rhel_subscription_pass
    - debug: msg="Result:{{ rhel_subscription_pass.value }}"
    
    - name: Get the value of the "ipam_passwd" attribute defined by a prior Ruby method (get_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: root
          attribute: "ipam_passwd"
      register: ipam_password
      ignore_errors: yes
    - debug:
        msg: Result = {{ ipam_password.value }}
      when: ipam_password is succeeded
    
    - name: Set a "domain_name" root attribute (set_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_attribute:
          object: "root"
          attribute: "domain_name"
          value:  "company.org"
  
    - name: Set several IPAM-related root attributes (set_attributes)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_attributes:
          object: "root"
          attributes:
            ipam_ip_address: "192.168.1.23"
            ipam_netmask: "255.255.255.0"
            ipam_gateway: "192.168.2.254"
      
    - name: Encrypt a "root_passwd" object attribute (set_encrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_encrypted_attribute:
          object: root
          attribute: "root_passwd"
          value: "very_very_secret"
    
    - name: Decrypt an attribute from an object (get_decrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_attribute:
          object: root
          attribute: "root_passwd"
      register: decrypted_attribute
    - debug: msg=Result:{{ decrypted_attribute.value }}
    
    # Working with state machines:
    #
    #        'set_retry'
    #        'get_state_var_names'
    #        'state_var_exists'
    #        'get_state_var'
    #        'set_state_var'
    
    - name: Get the list of state vars (get_state_var_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_state_var_names: yes
      register: get_state_var_names
    - debug: msg="Result:{{ get_state_var_names.value }}"
    
    - name: Check whether a "task_id" state var exists (state_var_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        state_var_exists:
          attribute: "task_id"
      register: state_var_exists
    - debug: msg="Result:{{ state_var_exists.value }}"
    
    - name: Get the value of the "request_id" state var (get_state_var)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_state_var:
          attribute: "request_id"
      register: state_var1
    - debug:
        msg: Result = {{ state_var1.value }}
        
    - name: Get the value of the "task_id" state var (get_state_var)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_state_var:
          attribute: "task_id"
      register: state_var2
    - debug:
        msg: Result = {{ state_var2.value }}
    
    - name: Set a "job_id" state var (set_state_var)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_state_var:
          attribute: "job_id"
          value: "68008"
      
    - name: Get the value of ae_state_retries
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: root
          attribute: "ae_state_retries"
      register: ae_state_retries
    - debug:
        msg: State retry number {{ ae_state_retries.value }}
        
    - name: Set state status to retry
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_retry:
          interval: 60
      when: ae_state_retries.value|int < 3
     
    #- debug:
    #    msg: State retry number {{ workspace.workspace.input.objects.root.ae_state_retries }}
    #- name: Set state status to retry
    #  manageiq_automate:
    #    workspace: "{{ workspace }}"
    #    set_retry:
    #      interval: 30
    #  when: workspace.workspace.input.objects.root.ae_state_retries|int < 3

#- name: dump the workspace
#  hosts: localhost
#  roles:
#  - ansible-role-listvars
    

          






