---
- name: manageiq-automate role example usage
  hosts: localhost
  connection: local
  vars:
  - object: root
  - interval: 600

  gather_facts: False
  roles:
  - syncrou.manageiq-automate

  tasks:
    
  # Working with input parameters:
  #      'method_parameter_exists'
  #      'get_method_parametersâ€™
  #      'get_method_parameter'
  #      'get_decrypted_method_parameter'

    - name: Get the list of method parameters (get_method_parameters)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_method_parameters: yes
      register: get_method_parameters
    - debug: msg="Result:{{ get_method_parameters.value }}"

    - name: Check if a method parameter called 'this' exists (method_parameter_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        method_parameter_exists:
          parameter: "this"
      register: method_parameter_exists
    - debug: msg="Result:{{ method_parameter_exists.value }}"
    
    - name: Get the value of a method parameter called 'this' (get_method_parameter)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_method_parameter:
          parameter: "this"
      register: this_method_parameter
    - debug: msg="Result:{{ this_method_parameter.value }}"
    - debug: msg="(The same from a built-in var:{{ this }})"
    
    - name: Decrypt a method_parameter called 'scrambled_this' (get_decrypted_method_parameter)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_method_parameter:
          attribute: scrambled_this
      register: decrypted_method_parameter
    - debug: msg=Result:{{ decrypted_method_parameter.value }}
    
  # Working with Objects:
  #
  #    'object_exists'
  #    'get_object_names'
  #      'get_object_attribute_names'
  #    'get_vmdb_object'

    - name: Get the full list of objects/instances in the workspace (get_object_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_names: yes
      register: workspace_object_names
    - debug: msg="Result:{{ workspace_object_names.value }}"
    
    - name: Get the list of root object attribute names (get_object_attribute_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_attribute_names:
          object: "root"
      register: root_object_attribute_names
    - debug: msg="Result:{{ root_object_attribute_names.value }}"
    
    - name: Get each of the root object's attributes (get_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: root
          attribute: "{{ item }}"
     # no_log: True
      loop: "{{ root_object_attribute_names.value }}"
      register: root_attributes
      
    - name: Extract the attribute names containing 'href_slug', and values into a list
      set_fact:
        root_objects: "{{ root_objects|default({}) | combine( {item.item: item.value} ) }}"
      no_log: True
      loop: "{{ root_attributes.results }}"
      when: item.value|regex_search('(href_slug)')
    - debug: msg="root objects:{{ root_objects }}"
    
    - name: Get the root object's href'able attributes as objects (get_vmdb_object)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_vmdb_object:
          object: root
          attribute: "{{ item.key }}"
      #no_log: True
      loop: "{{ root_objects|dict2items }}"
      register: objects
    - debug: msg=Result:{{ objects|dict2items }}

  # Working with attributes:
  #      'attribute_exists':
  # 	   'get_attribute'
  #      'get_decrypted_attribute'
  #      'get_object_attribute_names'
  #      'set_attribute'
  #      'set_attributes'
  #      'set_encrypted_attribute'
      
    - name: Check if an object/instance attribute exists (attribute_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        attribute_exists:
          object: "/ManageIQ/System/Request/call_instance"
          attribute: "::miq::parent"
      register: attribute_exists
    - debug: msg="Result:{{ attribute_exists.value }}"

    - name: Get the "::miq::parent" object/instance attribute (get_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: "/ManageIQ/System/Request/call_instance"
          attribute: "::miq::parent"
      register: get_attribute
    - debug: msg="Result:{{ get_attribute.value }}"
    
    - name: Get the full list of configuration domain attribute names (get_object_attribute_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_object_attribute_names:
          object: "/Configuration/OpenShift/Parameters/default"
      register: configuration_domain_attribute_names
    - debug: msg="Result:{{ configuration_domain_attribute_names.value }}"
    
    - name: Get the "rhel_subscription_pool" attribute from a configuration domain instance (get_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_attribute:
          object: "/Configuration/OpenShift/Parameters/default"
          attribute: "rhel_subscription_pool"
      register: rhel_subscription_pool
    - debug: msg="Result:{{ rhel_subscription_pool.value }}"
    
    - name: Set a "vm_name" root attribute (set_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_attribute:
          object: "root"
          attribute: "vm_name"
          value:  "pemcg-rhel7-002"
      register: updated_workspace
    - debug: msg="Result:{{ updated_workspace.workspace }}"

    - name: Set several root attributes (set_attributes)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_attributes:
          object: "root"
          attributes:
            ipam_ip_address: "192.168.1.23"
            ipam_netmask: "255.255.255.0"
            ipam_gateway: "192.168.2.254"
      register: updated_workspace
    - debug: msg="Result:{{ updated_workspace.workspace }}"
      
    - name: Encrypt a "root_password" object attribute (set_encrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_encrypted_attribute:
          object: root
          attribute: "root_password"
          value: "very_secret"
      register: updated_workspace
    - debug: msg="Result:{{ updated_workspace }}"
    
    - name: Decrypt an attribute from an object (get_decrypted_attribute)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_decrypted_attribute:
          object: root
          attribute: "root_password"
      register: decrypted_attribute
    - debug: msg=Result:{{ decrypted_attribute.value }}
    
    # Working with state machines:
    #
    #        'set_retry'
    #        'get_state_var_names'
    #        'state_var_exists'
    #        'get_state_var'
    #        'set_state_var'
    
    - name: Get the list of state vars (get_state_var_names)
      manageiq_automate:
        workspace: "{{ workspace }}"
        get_state_var_names: yes
      register: get_state_var_names
    - debug: msg="Result:{{ get_state_var_names.value }}"
    
    - name: Check whether a "task_id" state var exists (state_var_exists)
      manageiq_automate:
        workspace: "{{ workspace }}"
        state_var_exists:
          attribute: "task_id"
      register: state_var_exists
    - debug: msg="Result:{{ state_var_exists.value }}"
    
    - name: Set a "job_id" state var (set_state_var)
      manageiq_automate:
        workspace: "{{ workspace }}"
        set_state_var:
          attribute: "job_id"
          value: "68008"
      register: updated_workspace
    - debug: msg="Result:{{ updated_workspace.workspace }}"


    

          






